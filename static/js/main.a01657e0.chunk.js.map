{"version":3,"sources":["components/Cards/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Cards","title","text1","text2","image","className","src","svgFile","alt","Header","REGIONS","gql","App","useState","search","setSearch","useQuery","loading","error","data","filteredCountries","Country","filter","name","toLowerCase","includes","toLocaleLowerCase","onChange","e","target","value","type","placeholder","map","nativeName","capital","flag","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kUAwBeA,MApBf,YAKI,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,MACAC,EACC,EADDA,MAEA,OACQ,yBAAKC,UAAU,WACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,QAASF,UAAU,eAAeG,IAAI,QACpD,yBAAKH,UAAU,aACf,wBAAIA,UAAU,cAAcJ,GAC5B,wBAAII,UAAU,aAAaH,GAC3B,uBAAGG,UAAU,aAAY,kBAAC,IAAD,CAAWA,UAAU,gBAAiBF,O,MCShEM,MArBf,WACE,OACE,gCACA,yBAAKJ,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qCACX,uCACA,0DACA,6BACA,0E,2LCVxB,IAAMK,EAAUC,YAAH,KA6CEC,MAhCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEoBC,YAASN,GAAlCO,EAFK,EAELA,QAASC,EAFJ,EAEIA,MAAOC,EAFX,EAEWA,KACxB,GAAIF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,uCAClB,IAEME,GAFQD,GAAQA,EAAKE,SAAY,IAERC,QAAO,SAAAC,GACpC,OAAOA,EAAKA,KAAKC,cAAcC,SAASX,EAAOY,wBAGjD,OACE,yBAAKrB,UAAU,2BAEb,kBAAC,EAAD,MAEA,2BAAOA,UAAU,oCAAoCsB,SAAU,SAAAC,GAAC,OAAIb,EAAUa,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,wBAEvH,yBAAK3B,UAAU,eACZe,EAAkBa,KAAI,gBAAGV,EAAH,EAAGA,KAAMW,EAAT,EAASA,WAAYC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,KAA9B,OACrB,kBAAC,EAAD,CACEnC,MAAOsB,EACPrB,MAAOgC,EACP/B,MAAOgC,EACP/B,MAAOgC,UC/BCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVAC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,8CAGPC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.a01657e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { GiCapitol } from \"react-icons/gi\";\r\nimport './styles.css'\r\n\r\nfunction Cards({\r\n  title,\r\n  text1,\r\n  text2,\r\n  image\r\n}) {\r\n  return (\r\n          <div className=\"col p-3\">\r\n            <div className=\"card thumbimg\">\r\n              <img src={image.svgFile} className=\"card-img-top\" alt=\"...\" />\r\n                <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n                <h6 className=\"card-text\">{text1}</h6>\r\n                <p className=\"card-text\"><GiCapitol className=\"capitalicon\" />{text2}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n  )\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\n// import { Container } from './styles';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n    <div className=\"view intro-2\">\r\n        <div className=\"full-bg-img\">\r\n            <div className=\"mask rgba-indigo-slight flex-center\">\r\n                <div className=\"container\">\r\n                    <div className=\"text-white text-left wow fadeInUp\">\r\n                        <h2>GAMEFIK</h2>\r\n                        <h5>Atividade - GraphCountries</h5>\r\n                        <br/>\r\n                        <p>Software em React utilizando GraphQl</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Cards from './components/Cards';\nimport Header from './components/Header';\n\nconst REGIONS = gql`\n  {\n    Country{\n      name\n      nativeName\n      capital\n      flag {\n        svgFile\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const { loading, error, data } = useQuery(REGIONS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  const list = (data && data.Country) || [];\n\n  const filteredCountries = list.filter(name => {\n    return name.name.toLowerCase().includes(search.toLocaleLowerCase())\n  })\n\n  return (\n    <div className=\"container-fluid mx-auto\">\n\n      <Header />\n\n      <input className=\"form-control form-control-lg my-3\" onChange={e => setSearch(e.target.value)} type=\"text\" placeholder=\"Procurar paÃ­s...\" />\n\n      <div className=\"row mx-auto\">\n        {filteredCountries.map(({ name, nativeName, capital, flag }) => (\n          <Cards\n            title={name}\n            text1={nativeName}\n            text2={capital}\n            image={flag}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: 'https://countries-274616.ew.r.appspot.com',\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}